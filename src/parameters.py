import os
import json
import logging

g_logger = None

class SimulatorParameters:
    """Parameters from the configuration file are stored in this class"""

    def __init__(self) -> None:
        self.output_path: str = './blockchains'
        self.simulator_data_filename: str = 'mySimulator.pkl'
        self.execution_time: float = 1000.0

        # Point 1 of PDF: Total Nodes present in the P2P cryptocurrency network
        self.n_total_nodes: int = 50
        # Point 1 of PDF: z% of nodes are slow
        self.z_percent_slow_nodes: float = 40.0
        # Malicious nodes percent
        self.percent_malicious_nodes: float = 10.0
        # Max delay between two blocks created, in seconds
        self.max_block_creation_delay_sec: float = 7200.0

        # Point 2 of PDF: Exponential Distribution Mean for the inter-arrival
        # time between transactions generated by a peer. Randomly generated.
        self.T_tx_exp_txn_interarrival_mean_sec: float = 20.0

        # Point 7 of PDF: Average time to mine a new block in the network
        self.T_k_block_avg_mining_time_sec: float = 600.0  # 600 is the mean block interarrival time for bitcoin

        self.min_light_delay_sec: float = 0.010
        self.max_light_delay_sec: float = 0.500
        self.node_initial_coins_low: float = 10.0  # used to initialize the genesis block
        self.node_initial_coins_high: float = 50.0  # used to initialize the genesis block
        self.max_transactions_per_block: int = 1000  # Point 7 of PDF: max transactions a block can store
        self.mining_reward_start: float = 50.0
        self.mining_reward_update_percent: float = -50.0
        self.mining_reward_update_block_time: int = 2016
        # ---
        self.number_of_slow_nodes: int = 0
        self.number_of_fast_nodes: int = 0
        self.number_of_malicious_nodes: int = 0

    def load_from_file(self, config_file_name: str):
        """Initialize the simulator parameters"""
        global g_logger
        g_logger.debug(f'Loading {config_file_name=}')

        # Open the config file and parse it
        config_file = open(config_file_name)
        parameters = json.load(config_file)

        # Read parameters from the config file
        self.output_path: str = os.path.abspath(parameters['output_path'])
        self.simulator_data_filename: str = parameters['simulator_data_filename']
        os.makedirs(self.output_path, exist_ok=True)
        self.execution_time: float = parameters['execution_time']

        self.n_total_nodes: int = parameters['n_total_nodes']
        self.z_percent_slow_nodes: float = parameters['z_percent_slow_nodes']
        self.percent_malicious_nodes: float = parameters['percent_malicious_nodes']
        self.max_block_creation_delay_sec: float = parameters['max_block_creation_delay_sec']

        self.T_tx_exp_txn_interarrival_mean_sec: float = parameters['T_tx_exp_txn_interarrival_mean_sec']

        self.T_k_block_avg_mining_time_sec: float = parameters['T_k_block_avg_mining_time_sec']

        self.min_light_delay_sec: float = parameters['min_light_delay_sec']
        self.max_light_delay_sec: float = parameters['max_light_delay_sec']

        self.node_initial_coins_low: float = parameters['node_initial_coins_low']
        self.node_initial_coins_high: float = parameters['node_initial_coins_high']
        self.max_transactions_per_block: int = parameters['max_transactions_per_block']

        self.mining_reward_start: float = parameters['mining_reward_start']
        self.mining_reward_update_percent: float = parameters['mining_reward_update_percent']
        self.mining_reward_update_block_time: int = parameters['mining_reward_update_block_time']

        # ---
        # z% nodes are slow
        self.number_of_slow_nodes: int = int(self.n_total_nodes * self.z_percent_slow_nodes) // 100

        if self.number_of_slow_nodes < 0:
            g_logger.error('Condition not satisfied: 0 <= z_percent_slow_nodes <= 100')
            g_logger.warning('Making ZERO nodes as slow because "z_percent_slow_nodes < 0"')
            self.number_of_slow_nodes = 0
        elif self.number_of_slow_nodes > self.n_total_nodes:
            g_logger.error('Condition not satisfied: 0 <= z_percent_slow_nodes <= 100')
            g_logger.warning('Making ALL nodes as slow because "z_percent_slow_nodes > 100"')
            self.number_of_slow_nodes = self.n_total_nodes

        # (100 - z)% nodes are fast
        self.number_of_fast_nodes: int = self.n_total_nodes - self.number_of_slow_nodes

        # number of malicious nodes in the network
        self.number_of_malicious_nodes: int = int(self.n_total_nodes * self.percent_malicious_nodes) // 100
        if self.number_of_malicious_nodes < 0:
            g_logger.error('Condition not satisfied: 0 <= percent_malicious_nodes <= 100')
            g_logger.warning('Making ZERO nodes as malicious because "percent_malicious_nodes < 0"')
            self.number_of_malicious_nodes = 0
        elif self.number_of_malicious_nodes > self.n_total_nodes:
            g_logger.error('Condition not satisfied: 0 <= percent_malicious_nodes <= 100')
            g_logger.warning('Making ALL nodes as malicious because "percent_malicious_nodes > 100"')
            self.number_of_malicious_nodes = self.n_total_nodes

    def log_parameters(self):
        """Print all the Simulator Parameters to /dev/stdout"""
        print(f'Execution Time = {self.execution_time} seconds')
        print()
        print(f'      n  = Number of peers specified in the config file : {self.n_total_nodes}')
        print(f'      z  = {self.z_percent_slow_nodes=} %')
        print(f'      z% = Number of slow nodes : {self.number_of_slow_nodes}')
        print(f'(100-z)% = Number of fast nodes : {self.number_of_fast_nodes}')
        print(f' Number of malicious fast nodes : {self.number_of_malicious_nodes}')
        print()
        print(f'    T_tx = (seconds) Exponential Distribution -> '
              f'Transaction Inter-arrival Mean = {self.T_tx_exp_txn_interarrival_mean_sec}')
        print(f'          average block mining/interarrival time = {self.T_k_block_avg_mining_time_sec} seconds')
        print(f' min ρij = (seconds) min light propagation delay = {self.min_light_delay_sec}')
        print(f' max ρij = (seconds) max light propagation delay = {self.max_light_delay_sec}')
        print()
        print(f'         min initial coins = {self.node_initial_coins_low}')
        print(f'         max initial coins = {self.node_initial_coins_high}')
        print(f'max transactions per block = {self.max_transactions_per_block}')
        print(f'  max block creation delay = {self.max_block_creation_delay_sec} seconds')
        print()
        print(f'Mining reward start             = {self.mining_reward_start}')
        print(f'Mining reward update percent    = {self.mining_reward_update_percent}')
        print(f'Mining reward update block time = {self.mining_reward_update_block_time}')
        print()