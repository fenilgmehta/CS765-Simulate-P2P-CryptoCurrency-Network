#!/usr/bin/env python3
import json
import hashlib
import sys
import math
import random

# Parameters in the configuration file (will be read from the file during initialization)
total_nodes = 0
number_of_slow_nodes = 0
number_of_fast_nodes = 0
txn_interarrival_mean = 0
nodes_list = []

# Structure of a node on the P2P network
class Node:
    def __init__(self):
        # List of connected peers
        self.neighbors = []
        self.txn_interarrival_time = (-1.0/txn_interarrival_mean)*math.log(random.uniform(0.1, 1))
    
    # Adding new peer to the neighbors list 
    # (inserts an edge between this and new_peer in the node graph)
    def add_new_peer(self, new_peer):
        self.neighbors.append(new_peer)

class Transaction:
    def __init__(self, sender, receiver, amount):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount

class EventQueue:
    def __init__(self):
        self.events = []

# Initialize the simulator parameters
def initial_setup():
    global total_nodes, number_of_slow_nodes, number_of_fast_nodes, nodes_list
    global txn_interarrival_mean

    config_file = open('config.json')
    parameters = json.load(config_file)

    # Read parameters from the config file

    # Total nodes present in the P2P cryptocurrency network
    total_nodes = parameters["total-nodes"]
    
    # parameters["slow-nodes"] === z%
    number_of_slow_nodes = int(parameters["slow-nodes"]*total_nodes/100.0)
    
    if (number_of_slow_nodes > total_nodes):
        print("Error: Number of slow nodes should be less than or equal to the total number of nodes", file = sys.stderr)

    # (100 - z)% nodes are fast nodes
    number_of_fast_nodes = total_nodes - number_of_slow_nodes

    # Exponential distribution mean for the interarrival between transactions generated by a peer
    txn_interarrival_mean = parameters["txn-interarrival-mean"]

def Main():
    initial_setup()
    print("Number of peers specified in the config file : " + str(total_nodes))
    print("Number of slow nodes : " + str(number_of_slow_nodes))
    print("Number of fase nodes : " + str(number_of_fast_nodes))

if __name__ == '__main__':
    Main()
    
